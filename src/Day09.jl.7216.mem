        - module Day09
        - using AdventOfCode2020
        - using Combinatorics
        - using Base.Iterators
        - 
        - const raw_data = readinput(joinpath(@__DIR__, "Day09_input.txt"))
        - 
        - function check_number(preamble, N)
        -     #any(a+b == n for (a, b) in combinations(preamble, 2))
     2016     for i in preamble, j in preamble, n in N
        0         if i != j
        0             if i + j == n
    41888                 return true
        -             end
        -         end
        -     end  
        0     false
        - end
        - 
        - #=
        - function part1(numberline, w)
        -     @views for i in 1:length(numberline) - w
        -         s = check_number(numberline[i:i+w-1], numberline[i+w])
        -         if s == false
        -             return numberline[i+w]
        -         end
        -     end
        - end
        - =#
        - 
        - function part1(numberline, w)
        -     v = true 
        0     N = nothing
    46592     while v == true
    23280         preamble = Iterators.take(numberline, w)
        0         N = Iterators.take(Iterators.drop(numberline, w), 1)
        0         v = check_number(preamble, N)
        0         numberline = Iterators.drop(numberline, 1)
        -     end
       80     collect(N)
        - end
        - 
        - function solve(data = raw_data)
        0     numberline = (parse(Int, n.match) for n in eachmatch(r"\d+", data))
        -     #numberline = [parse(Int, n.match) for n in eachmatch(r"\d+", data)]
        -     solution1 = part1(numberline, 25)
        -     solution2 = part1(data)
        -     (Part1=solution1, Part2=solution2)
        - end
        - 
        - function part1(data)
        -     missing
        - end
        - 
        - function part2(data)
        -     missing
        - end
        - 
        - end # module
